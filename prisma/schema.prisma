generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum DuesStatus {
  APPROVED
  NOT_APPROVED
}

model User {
  id            String     @id @default(cuid())
  phone         String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole   @default(USER)
  duesapproved  DuesStatus @default(NOT_APPROVED)
  onboarded     Boolean    @default(false)
  password      String?

  student Student?
  admin   Admin?
  Account Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Student {
  id         String  @id @default(cuid())
  userId     String  @unique
  firstName  String?
  lastName   String?
  otherName  String?
  department String?
  state      String?
  tribe      String?
  gender     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Admin {
  id            String @id @default(cuid())
  userId        String @unique
  firstname     String
  lastname      String
  accountNumber String

  dues         Dues[]
  paymentLinks PaymentLink[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentLink {
  id      String @id @default(cuid())
  adminId String
  title   String
  price   String
  link    String?

  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Dues {
  id          String @id @default(cuid())
  adminId     String
  title       String
  description String
  price       String

  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model transaction {
  id String @id @default(cuid())

  amount    Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
